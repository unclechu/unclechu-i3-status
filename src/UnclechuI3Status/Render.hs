{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE PackageImports #-}
{-# LANGUAGE UnicodeSyntax #-}
{-# LANGUAGE ViewPatterns #-}

-- | Serializing the state of the application into a string
module UnclechuI3Status.Render
     ( render
     ) where

import "base" GHC.Generics (Generic)
import "base-unicode-symbols" Prelude.Unicode

import "aeson" Data.Aeson (ToJSON (..), genericToJSON, encode)
import "base" Data.Tuple (swap)
import "base" Data.Word (Word8)
import "bytestring" Data.ByteString.Lazy.Char8 (ByteString)
import "data-default" Data.Default (Default (def))
import "time" Data.Time.LocalTime (utcToZonedTime)

-- Local imports

import UnclechuI3Status.Handler.AppState.Types (State (..))
import UnclechuI3Status.Types (UPowerBatteryState (..))
import UnclechuI3Status.Utils
import UnclechuI3Status.Utils.Aeson (withFieldNamer)


-- | Render given state to a string (encoded JSON value)
--
-- This item should be a part of an open streaming list printed to stdout.
-- Adding commas and open of the list is out of the responsibilities of this
-- function. It should be handled somewhere else.
render âˆ· State â†’ ByteString
render s
  = (encode âˆ· [Unit] â†’ ByteString)
  $ maybe mempty (\x â†’ [windowTitleView x, _separate]) (windowTitle s)
  â‹„
  [ numLockView s
  , capsLockView s
  , alternativeView s
  , _separate
  ]
  â‹„ kbdLayoutView s
  â‹„ [ _separate, dateAndTimeView s ]
  â‹„ maybe mempty (\x â†’ [_separate, batteryView x]) (battery s)


-- * Units

numLockView âˆ· State â†’ Unit
numLockView s
  = def
  { fullText = showNumLock isOn
  , color = Just $ colorOfNumLock isOn
  , name = Just "numlock"
  }
  where
    isOn = numLock s


capsLockView âˆ· State â†’ Unit
capsLockView s
  = def
  { fullText = showCapsLock isOn
  , color = Just $ colorOfCapsLock isOn
  , name = Just "capslock"
  }
  where
    isOn = capsLock s


alternativeView âˆ· State â†’ Unit
alternativeView s
  = def
  { fullText =
      either (\n â†’ "%UNKNOWN:" â‹„ show n â‹„ "%") Prelude.id $
        showAlternativeState alternativeState

  , color =
      either (const Nothing) Just $
        colorOfAlternativeState alternativeState

  , name = Just "alternative"
  }
  where
    alternativeState = alternative s


-- Layout names are just hardcoded, they may be not in this exact order.
kbdLayoutView âˆ· State â†’ [Unit]
kbdLayoutView s = go where
  f nameSuffix fullText (Just â†’ color) =
    def { name = Just ("kbdlayout-" â‹„ nameSuffix), fullText, color }

  go = case kbdLayout s of
    Nothing â†’ pure $ f "UNDEFINED" "%UNDEFINED%" "#eeeeee"
    Just (Left Nothing) â†’ pure $ f "ERROR" "%ERROR%" "#ff0000"
    Just (Left (Just n)) â†’
      pure $ f "UNKNOWN" ("%UNKNOWN:" â‹„ show n â‹„ "%") "#eeeeee"
    Just (Right layout) â†’
      [minBound .. maxBound âˆ· Layout] <&> \x â†’
        f (show x) (show x) $
          if x â‰¡ layout then colorOfLayout layout else "#666666"


dateAndTimeView âˆ· State â†’ Unit
dateAndTimeView s = go where
  go = maybe def { fullText = "â€¦" } (set âˆ˜ render') $ lastTime s
  render' = renderDate âˆ˜ uncurry utcToZonedTime âˆ˜ swap
  set x  = def { fullText = x, name = Just "datentime" }


batteryView âˆ· (Double, UPowerBatteryState) â†’ Unit
batteryView (chargeLeft, batteryState) = go where
  go = def
    { -- Rounding because floating point is always zero
      fullText = icon batteryState â‹„ show (round chargeLeft âˆ· Word8) â‹„ "%"

    , name = Just "battery"

    , color =
        Just $ case batteryState of
          Charging â†’ connectedToAdapterColor
          FullyCharged â†’ connectedToAdapterColor
          _ | chargeLeft â‰¥ 80 â†’ "#00ff00"
            | chargeLeft < 20 â†’ "#ff0000"
            | otherwise â†’ "#ffff00"

    }

  connectedToAdapterColor = "#00ffff"
  dischargingIcon = "ðŸ”‹"
  chargingIcon = "âš¡"

  icon = \case
    Charging â†’ chargingIcon
    FullyCharged â†’ chargingIcon
    _ â†’ dischargingIcon


windowTitleView âˆ· String â†’ Unit
windowTitleView x = def
  { fullText = x
  , name = Just "window-title"
  }


_separate âˆ· Unit
_separate = def { fullText = "/", color = Just "#666666" }
-- separateAfter x = x { separator = Just True, separatorBlockWidth = Just 20 }


-- * Types

data Unit
   = Unit
   { fullText âˆ· String
   , shortText âˆ· Maybe String
   , color âˆ· Maybe String
   , background âˆ· Maybe String
   , border âˆ· Maybe String
   , minWidth âˆ· Maybe Word
   , align âˆ· Maybe String
   , name âˆ· Maybe String
   , _instance âˆ· Maybe String
   , urgent âˆ· Maybe Bool
   , separator âˆ· Maybe Bool
   , separatorBlockWidth âˆ· Maybe Word
   , markup âˆ· Maybe String
   } deriving (Show, Eq, Generic)

instance Default Unit where
  def
    = Unit
    { fullText = ""
    , shortText = Nothing
    , color = Just "#999999"
    , background = Nothing
    , border = Nothing
    , minWidth = Nothing
    , align = Nothing
    , name = Nothing
    , _instance = Nothing
    , urgent = Nothing
    , separator = Just False
    , separatorBlockWidth = Nothing
    , markup              = Just "none"
    }

instance ToJSON Unit where
  toJSON = genericToJSON $ withFieldNamer f
    where f ('_' : xs) = xs; f x = x
